//Team Sovereign Dashboard Display
//Designed by ankit and pan
#define LCD_CS A3 // Chip Select goes to Analog 3
#define LCD_CD A2 // Command/Data goes to Analog 2
#define LCD_WR A1 // LCD Write goes to Analog 1
#define LCD_RD A0 // LCD Read goes to Analog 0
#define LCD_RESET A4 // Can alternately just connect to Arduino's reset pin

//Libraries
#include <SPI.h> //for SPI Bus Communication
#include <Adafruit_GFX.h> //Hardware-Specific Library
#include <MCUFRIEND_kbv.h> //for TFT LCD Sheild
#include <mcp_can.h> //for CAN BUS Communication
#include <SD.h> //for SD Read/Write

//Load the required Free Fonts
#include <Fonts/FreeSansBold9pt7b.h>

//Variables and Initializations
MCUFRIEND_kbv tft;

// Common 16-bit Color Values
#define BLACK   0x0000
#define BLUE    0x001F
#define RED     0xF800
#define GREEN   0x07E0
#define CYAN    0x07FF
#define MAGENTA 0xF81F
#define YELLOW  0xFFE0
#define WHITE   0xFFFF

long unsigned int canId;
unsigned char len = 0; //Length of CAN Message
unsigned char canBuffer[8]; //CAN Buffer
const int csCAN = 53; //CS 53, SO 50, SI 51, SCK 52
const int csSD = 48; //CS 48, SO 50, SI 51, SCK 52

float velocity = 0, current = 0, voltage = 53.2, bTemp = 37, cTemp = 27, soc = 100, throttle = 50;
int errorMessage1, errorMessage2, statusMessage1, statusMessage2;
float rpmTokmph = 23 * 2.54 * 0.001885 / 11; //diameter(cm)*c/gearRatio
float vMax = 53.2, vMin = 46; //Battery Constants
float sB = 100 / (vMax - vMin), cB = sB * vMin; //conversion for SOC
int tMax = 220, tMin = 40;
float sT = 100 / (float)(tMax - tMin), cT = sT * tMin; //conversion for Throttle

#define PALETTEDEPTH 0 //do not support Palette Modes

//10K NTC Constants
#define rT0 10000 //Thermistor Resistance
#define exponent 3977 //Experimental Constants
#define vcc 5 //Supply voltage
#define resistance 10000 //Resistance
float rT, vR, logValue, t, t0 = 25 + 273.15, vRt;

uint32_t when = 0;
uint16_t nRun = 0; char readCharacter;

MCP_CAN KLSCAN(csCAN); //Set CS Pin
File myFile;

void setup() {
  // put your setup code here, to run once:
  uint16_t ID = tft.readID();
  tft.begin(ID);
  SD.begin(csSD);
  tft.setRotation(3);
  tft.fillScreen(BLACK);

  KLSCAN.begin(MCP_ANY, CAN_500KBPS, MCP_8MHZ);
  KLSCAN.setMode(MCP_NORMAL);

  myFile = SD.open("NRUNS.txt");
  while (myFile.available()) {
    readCharacter = myFile.read();
    if (readCharacter == '\n') {
      nRun++; continue;
    }
  }
  myFile.close();
  nRun = nRun + 1;

  myFile = SD.open("NRUNS.txt", FILE_WRITE);
  myFile.print("\n");
  myFile.print(nRun);
  myFile.close();
  
  myFile = SD.open("RUNDATA.txt", FILE_WRITE);
  myFile.print("----------------------------Run ");
  myFile.print(nRun);
  myFile.println("----------------------------");
  myFile.close();

  //Root Landing Page
  char imageName[7] = "/1.bmp";
  showBMP(imageName, 0, 0);
  delay(2000);
  tft.fillScreen(WHITE);

  //Display Initialization
  strcpy(imageName, "/2.bmp");
  showBMP(imageName, 0, 0);
  tft.drawLine(0, 140, tft.width(), 140, BLACK);
  tft.drawLine(0, 230, tft.width(), 230, BLACK);
  tft.drawLine(160, 50, 160, tft.height(), BLACK);
  tft.drawLine(320, 50, 320, tft.height(), BLACK);
  
  showtext(200, 45, 1, WHITE, &FreeSansBold9pt7b), tft.print("Run Id: "); tft.print(nRun);
  displayValues();
  showtext(45, 130, 1, BLACK, &FreeSansBold9pt7b), tft.print("SOC (%)");
  showtext(178, 130, 1, BLACK, &FreeSansBold9pt7b), tft.print("Battery (degC)");
  showtext(355, 130, 1, BLACK, &FreeSansBold9pt7b), tft.print("Battery (V)");
  showtext(35, 220, 1, BLACK, &FreeSansBold9pt7b), tft.print("Current (A)");
  showtext(175, 220, 1, BLACK, &FreeSansBold9pt7b), tft.print("Velocity (kmph)");
  showtext(325, 220, 1, BLACK, &FreeSansBold9pt7b), tft.print("Controller (degC)");
  showtext(190, 310, 1, BLACK, &FreeSansBold9pt7b), tft.print("Throttle (%)");

  when = millis();
}

void loop() {
  // put your main code here, to run repeatedly:
  KLSCAN.readMsgBuf(&canId, &len, canBuffer);      // Read data: len = data length, buf = data byte(s)
  if ((canId & 0x1FFFFFFF) == 0x0CF11E05) {
    velocity = (canBuffer[1] * 256 + canBuffer[0]);
    velocity = velocity * rpmTokmph;
    current = (canBuffer[3] * 256 + canBuffer[2]) / 10.0;
    voltage = (canBuffer[5] * 256 + canBuffer[4]) / 10.0;
    soc = voltage * sB - cB;
    errorMessage1 = canBuffer[6];
    errorMessage2 = canBuffer[7];
  }

  else if ((canId & 0x1FFFFFFF) == 0x0CF11F05) {
    throttle = canBuffer[0] * sT - cT;
    cTemp = canBuffer[1] - 40;
    statusMessage1 = canBuffer[4];
    statusMessage2 = canBuffer[5];
  }

  bTemp = batteryTemperature();

  if (millis() - when >= 1000) {
    displayValues();
    storeValues();
  }
}

void displayValues() {
  showparams(10, 60, soc); tft.print(soc, decimalPlaces(soc));
  showBatteryTemperature();
  showparams(330, 60, voltage); tft.print(voltage, decimalPlaces(voltage));
  showCurrent();
  showparams(170, 150, velocity); tft.print(velocity, decimalPlaces(velocity));
  showparams(330, 150, cTemp); tft.print(cTemp, decimalPlaces(cTemp));
  tft.setCursor(70, 240); tft.setTextColor(BLACK, WHITE); tft.setTextSize(6); printStatus(statusMessage1, statusMessage2);
  showparams(170, 240, throttle); tft.print(throttle, decimalPlaces(throttle));
  tft.setCursor(330, 240); tft.setTextColor(BLACK, WHITE); tft.setTextSize(6); printError(errorMessage1, errorMessage2);

  when = millis();
}

void storeValues() {
  myFile = SD.open("runData.txt", FILE_WRITE);
  myFile.print(soc); myFile.print("\t");
  myFile.print(bTemp); myFile.print("\t");
  myFile.print(voltage); myFile.print("\t");
  myFile.print(current); myFile.print("\t");
  myFile.print(velocity); myFile.print("\t");
  myFile.print(cTemp); myFile.print("\t");
  storeStatus(statusMessage1, statusMessage2); myFile.print("\t");
  myFile.print(throttle); myFile.print("\t");
  storeError(errorMessage1, errorMessage2);
  myFile.close();
}

void showtext(int x, int y, int s, uint16_t color, const GFXfont *f) {
  tft.setFont(f);
  tft.setCursor(x, y);
  tft.setTextColor(color);
  tft.setTextSize(s);
}

void showparams(int x, int y, float value) {
  tft.setFont(NULL);
  tft.setCursor(x + xPosition(value), y);
  tft.setTextColor(BLACK, WHITE);
  tft.setTextSize(6);
}

void showBatteryTemperature() {
  tft.fillRect(161, 51, 160, 60, WHITE);
  showparams(170, 60, bTemp);
  tft.print(bTemp, decimalPlaces(bTemp));
}

void showCurrent() {
  tft.fillRect(0, 141, 160, 60, WHITE);
  showparams(10, 150, current);
  tft.print(current, decimalPlaces(current));
}

int xPosition(float data) {
  if (data >= 100)
    return 20;
  else
    return 0;
}

int decimalPlaces(float data) {
  if (data < 10)
    return 2;
  else if (data < 100)
    return 1;
  else
    return 0;
}

void printStatus(int status1, int status2) {
  int bit0 = 0, bit1 = 0;
  if (status1 & (1 << 0))
    bit0 = 1;
  if (status1 & (1 << 1))
    bit1 = 1;

  if (status2 & (1 << 3))
    tft.print("B");
  else if (bit0 == 0 && bit1 == 0)
    tft.print("N");
  else if (bit0 == 1 && bit1 == 0)
    tft.print("F");
  else if (bit0 == 0 && bit1 == 1)
    tft.print("R");
  else
    tft.print("E");
}

void printError(int err1, int err2) {
  if (err1 & (1 << 0))
    tft.print("ER00");
  else if (err1 & (1 << 1))
    tft.print("ER01");
  else if (err1 & (1 << 2))
    tft.print("ER02");
  else if (err1 & (1 << 3))
    tft.print("ER03");
  else if (err1 & (1 << 4))
    tft.print("ER04");
  else if (err1 & (1 << 5))
    tft.print("ER05");
  else if (err1 & (1 << 6))
    tft.print("ER06");
  else if (err1 & (1 << 7))
    tft.print("ER07");
  else if (err2 & (1 << 0))
    tft.print("ER08");
  else if (err2 & (1 << 1))
    tft.print("ER09");
  else if (err2 & (1 << 2))
    tft.print("ER10");
  else if (err2 & (1 << 3))
    tft.print("ER11");
  else if (err2 & (1 << 4))
    tft.print("ER12");
  else if (err2 & (1 << 5))
    tft.print("ER13");
  else if (err2 & (1 << 6))
    tft.print("ER14");
  else if (err2 & (1 << 7))
    tft.print("ER15");
  else
    tft.print("NOER");
}

//for storing the data (repeated code, can be refactored)
void storeStatus(int status1, int status2) {
  int bit0 = 0, bit1 = 0;
  if (status1 & (1 << 0))
    bit0 = 1;
  if (status1 & (1 << 1))
    bit1 = 1;

  if (status2 & (1 << 3))
    myFile.print("B");
  else if (bit0 == 0 && bit1 == 0)
    myFile.print("N");
  else if (bit0 == 1 && bit1 == 0)
    myFile.print("F");
  else if (bit0 == 0 && bit1 == 1)
    myFile.print("R");
  else
    myFile.print("E");
}

void storeError(int err1, int err2) {
  if (err1 & (1 << 0))
    myFile.println("ER00");
  else if (err1 & (1 << 1))
    myFile.println("ER01");
  else if (err1 & (1 << 2))
    myFile.println("ER02");
  else if (err1 & (1 << 3))
    myFile.println("ER03");
  else if (err1 & (1 << 4))
    myFile.println("ER04");
  else if (err1 & (1 << 5))
    myFile.println("ER05");
  else if (err1 & (1 << 6))
    myFile.println("ER06");
  else if (err1 & (1 << 7))
    myFile.println("ER07");
  else if (err2 & (1 << 0))
    myFile.println("ER08");
  else if (err2 & (1 << 1))
    myFile.println("ER09");
  else if (err2 & (1 << 2))
    myFile.println("ER10");
  else if (err2 & (1 << 3))
    myFile.println("ER11");
  else if (err2 & (1 << 4))
    myFile.println("ER12");
  else if (err2 & (1 << 5))
    myFile.println("ER13");
  else if (err2 & (1 << 6))
    myFile.println("ER14");
  else if (err2 & (1 << 7))
    myFile.println("ER15");
  else
    myFile.println("NOER");
}

float batteryTemperature() {
  vRt = analogRead(A5);
  vRt = (5.00 / 1023.00) * vRt; //Conversion to voltage
  vR = vcc - vRt;
  rT = vRt / (vR / resistance); //Resistance of RT
  logValue = log(rT / rT0);
  t = (1 / ((logValue / exponent) + (1 / t0))); //Temperature from thermistor
  t = t - 273.15; //in Celsius

  return t;
}

#define BMPIMAGEOFFSET 54
#define BUFFPIXEL      20

uint16_t read16(File& f) {
  uint16_t result;         // read little-endian
  f.read((uint8_t*)&result, sizeof(result));
  return result;
}

uint32_t read32(File& f) {
  uint32_t result;
  f.read((uint8_t*)&result, sizeof(result));
  return result;
}

uint8_t showBMP(char *nm, int x, int y)
{
  File bmpFile;
  int bmpWidth, bmpHeight;    // W+H in pixels
  uint8_t bmpDepth;           // Bit depth (currently must be 24, 16, 8, 4, 1)
  uint32_t bmpImageoffset;    // Start of image data in file
  uint32_t rowSize;           // Not always = bmpWidth; may have padding
  uint8_t sdbuffer[3 * BUFFPIXEL];    // pixel in buffer (R+G+B per pixel)
  uint16_t lcdbuffer[(1 << PALETTEDEPTH) + BUFFPIXEL], *palette = NULL;
  uint8_t bitmask, bitshift;
  boolean flip = true;        // BMP is stored bottom-to-top
  int w, h, row, col, lcdbufsiz = (1 << PALETTEDEPTH) + BUFFPIXEL, buffidx;
  uint32_t pos;               // seek position
  boolean is565 = false;      //

  uint16_t bmpID;
  uint16_t n;                 // blocks read
  uint8_t ret;

  if ((x >= tft.width()) || (y >= tft.height()))
    return 1;               // off screen

  bmpFile = SD.open(nm);      // Parse BMP header
  bmpID = read16(bmpFile);    // BMP signature
  (void) read32(bmpFile);     // Read & ignore file size
  (void) read32(bmpFile);     // Read & ignore creator bytes
  bmpImageoffset = read32(bmpFile);       // Start of image data
  (void) read32(bmpFile);     // Read & ignore DIB header size
  bmpWidth = read32(bmpFile);
  bmpHeight = read32(bmpFile);
  n = read16(bmpFile);        // # planes -- must be '1'
  bmpDepth = read16(bmpFile); // bits per pixel
  pos = read32(bmpFile);      // format
  if (bmpID != 0x4D42) ret = 2; // bad ID
  else if (n != 1) ret = 3;   // too many planes
  else if (pos != 0 && pos != 3) ret = 4; // format: 0 = uncompressed, 3 = 565
  else if (bmpDepth < 16 && bmpDepth > PALETTEDEPTH) ret = 5; // palette
  else {
    bool first = true;
    is565 = (pos == 3);               // ?already in 16-bit format
    // BMP rows are padded (if needed) to 4-byte boundary
    rowSize = (bmpWidth * bmpDepth / 8 + 3) & ~3;
    if (bmpHeight < 0) {              // If negative, image is in top-down order.
      bmpHeight = -bmpHeight;
      flip = false;
    }

    w = bmpWidth;
    h = bmpHeight;
    if ((x + w) >= tft.width())       // Crop area to be loaded
      w = tft.width() - x;
    if ((y + h) >= tft.height())      //
      h = tft.height() - y;

    if (bmpDepth <= PALETTEDEPTH) {   // these modes have separate palette
      //bmpFile.seek(BMPIMAGEOFFSET); //palette is always @ 54
      bmpFile.seek(bmpImageoffset - (4 << bmpDepth)); //54 for regular, diff for colorsimportant
      bitmask = 0xFF;
      if (bmpDepth < 8)
        bitmask >>= bmpDepth;
      bitshift = 8 - bmpDepth;
      n = 1 << bmpDepth;
      lcdbufsiz -= n;
      palette = lcdbuffer + lcdbufsiz;
      for (col = 0; col < n; col++) {
        pos = read32(bmpFile);    //map palette to 5-6-5
        palette[col] = ((pos & 0x0000F8) >> 3) | ((pos & 0x00FC00) >> 5) | ((pos & 0xF80000) >> 8);
      }
    }

    // Set TFT address window to clipped image bounds
    tft.setAddrWindow(x, y, x + w - 1, y + h - 1);
    for (row = 0; row < h; row++) { // For each scanline...
      // Seek to start of scan line.  It might seem labor-
      // intensive to be doing this on every line, but this
      // method covers a lot of gritty details like cropping
      // and scanline padding.  Also, the seek only takes
      // place if the file position actually needs to change
      // (avoids a lot of cluster math in SD library).
      uint8_t r, g, b, *sdptr;
      int lcdidx, lcdleft;
      if (flip)   // Bitmap is stored bottom-to-top order (normal BMP)
        pos = bmpImageoffset + (bmpHeight - 1 - row) * rowSize;
      else        // Bitmap is stored top-to-bottom
        pos = bmpImageoffset + row * rowSize;
      if (bmpFile.position() != pos) { // Need seek?
        bmpFile.seek(pos);
        buffidx = sizeof(sdbuffer); // Force buffer reload
      }

      for (col = 0; col < w; ) {  //pixels in row
        lcdleft = w - col;
        if (lcdleft > lcdbufsiz) lcdleft = lcdbufsiz;
        for (lcdidx = 0; lcdidx < lcdleft; lcdidx++) { // buffer at a time
          uint16_t color;
          // Time to read more pixel data?
          if (buffidx >= sizeof(sdbuffer)) { // Indeed
            bmpFile.read(sdbuffer, sizeof(sdbuffer));
            buffidx = 0; // Set index to beginning
            r = 0;
          }
          switch (bmpDepth) {          // Convert pixel from BMP to TFT format
            case 24:
              b = sdbuffer[buffidx++];
              g = sdbuffer[buffidx++];
              r = sdbuffer[buffidx++];
              color = tft.color565(r, g, b);
              break;
            case 16:
              b = sdbuffer[buffidx++];
              r = sdbuffer[buffidx++];
              if (is565)
                color = (r << 8) | (b);
              else
                color = (r << 9) | ((b & 0xE0) << 1) | (b & 0x1F);
              break;
            case 1:
            case 4:
            case 8:
              if (r == 0)
                b = sdbuffer[buffidx++], r = 8;
              color = palette[(b >> bitshift) & bitmask];
              r -= bmpDepth;
              b <<= bmpDepth;
              break;
          }
          lcdbuffer[lcdidx] = color;

        }
        tft.pushColors(lcdbuffer, lcdidx, first);
        first = false;
        col += lcdidx;
      }           // end cols
    }               // end rows
    tft.setAddrWindow(0, 0, tft.width() - 1, tft.height() - 1); //restore full screen
    ret = 0;        // good render
  }
  bmpFile.close();
  return (ret);
}
